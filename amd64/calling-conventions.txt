64-bit linux code that interfaces with C
libraries must use appropriate calling conventions

From left to right, pass as many parameters as will
fit in registers. The order in which registers are
allocated, are:
    For integers and pointers: rdi, rsi, rdx, rcx, r8, r9.
    For floating-point (float, double): xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7.
    Additional parameters are pushed on the stack, right to left, and are to be removed by the caller after the call.

The stack pointer rsp must be aligned to a 16-byte boundary
before making a call. Fine, but the process of making a call
pushes the return address (8 bytes) on the stack, so when a
function gets control, rsp is not aligned. You have to make
that extra space yourself, by pushing something or subtracting
8 from rsp.

The only registers that the called function is required to
preserve (the callee-save registers) are:
    rbp, rbx, r12, r13, r14, r15. All others are free to be changed by the called function.

The callee is also supposed to save the control bits of the
XMCSR and the x87 control word, but x87 instructions are rare
in 64-bit code so you probably donâ€™t have to worry about this.

Integers are returned in rax or rdx:rax, and floating point
values are returned in xmm0 or xmm1:xmm0.

rax, r0 : return for integral types, SCRATCH REGISTER
rcx, r1 : 4th integral argument, SCRATCH REGISTER
rdx, r2 : 3rd integral argument, SCRATCH REGISTER
rbx, r3 : callee saved
rsp, r4 : stack pointer
rbp, r5 : callee saved
rsi, r6 : 2nd integral argument, SCRATCH REGISTER
rdi, r7 : 1st integral argument, SCRATCH REGISTER
r8      : 5th integral argument, SCRATCH REGISTER
r9      : 6th integral argument, SCRATCH REGISTER
r10     : SCRATCH REGISTER
r11     : SCRATCH REGISTER
r12     : callee saved
r13     : callee saved
r14     : callee saved
r15     : callee saved
